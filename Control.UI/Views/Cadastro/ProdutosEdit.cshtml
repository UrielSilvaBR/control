@using Control.Model.Entities
@model Product

<div class="row">
    <div id="breadcrumb" class="col-md-12">
        <ol class="breadcrumb">
            <li><a href="#">Cadastro</a></li>
            <li><a href="#">Produtos</a></li>
            <li><a href="#">Editar</a></li>
        </ol>
    </div>
</div>

<div class="row">
    <div class="col-xs-12 col-sm-12">
        <div class="box">
            <div class="box-header">
                <div class="box-name">
                    <i class="fa fa-pencil"></i>
                    <span>Adicionar Produtos</span>
                </div>
                <div class="box-icons">
                    <a class="collapse-link">
                        <i class="fa fa-chevron-up"></i>
                    </a>
                    <a class="expand-link">
                        <i class="fa fa-expand"></i>
                    </a>
                    <a class="close-link">
                        <i class="fa fa-times"></i>
                    </a>
                </div>

                <div class="no-move"></div>
            </div>
            <!--Inicio-->
            @using (Html.BeginForm("ProdutosSave", "Cadastro", FormMethod.Post, new { @class = "form-horizontal" }))
            {
                <div class="box-content">

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)

                    <div class="form-group">
                        @Html.Label("Código", htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.ProductCode, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                            @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                        </div>
                        @Html.Label("Produto", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-5">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Marca", htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-3">
                            @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                        </div>
                        @Html.Label("Modelo", htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-5">
                            @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Descrição", htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label(string.Format(@"Unidade Medida"), htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-2">
                            @Html.DropDownListFor(model => model.ProductTypeUnitID, new SelectList(ViewBag.Unidades, "Id", "Description"), htmlAttributes: new { @class = "selddl" })
                            @*@Html.EditorFor(model => model.UnitMeasure, new { htmlAttributes = new { @class = "form-control" } })*@
                            @Html.ValidationMessageFor(model => model.UnitMeasure, "", new { @class = "text-danger" })
                        </div>
                        @Html.Label("Preço", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control", @id="txt_UnitPrice" } })
                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                        </div>
                        @Html.Label("Custo", htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.CostPrice, new { htmlAttributes = new { @class = "form-control", @id = "txt_CostPrice" } })
                            @Html.ValidationMessageFor(model => model.CostPrice, "", new { @class = "text-danger" })
                        </div>

                    </div>

                    <div class="form-group">
                        
                        @Html.Label("Estoque Min", htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.MinimumStockAlert, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MinimumStockAlert, "", new { @class = "text-danger" })
                        </div>

                        @Html.Label("Aliq. ICMS", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.AliqICMS, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.AliqICMS, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">

                        @Html.Label("NCM", htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.NCMCode, new { htmlAttributes = new { @class = "form-control" } })
                        </div>

                        @Html.Label("Descrição NCC", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-5">
                            @Html.EditorFor(model => model.DescriptionNCC, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Cadastrar" class="btn btn-primary" />
                            <a href='@Url.Action("Produtos", "Cadastro")'>
                                <i class="btn btn-primary">Voltar</i>
                            </a>
                        </div>
                    </div>

                </div>
            }
            <!--Fim-->
        </div>

    </div><!--box-->
</div><!--COL-->
<script type="text/javascript">
    $(document).ready(function () {

        $('#txt_UnitPrice').maskMoney({
            prefix: '',
            allowZero: false,
            allowNegative: false,
            defaultZero: true,
            thousands: '.',
            decimal: ',',
            precision: 2,
            affixesStay: false,
            symbolPosition: 'left'
        });

        $('#txt_CostPrice').maskMoney({
            prefix: '',
            allowZero: false,
            allowNegative: false,
            defaultZero: true,
            thousands: '.',
            decimal: ',',
            precision: 2,
            affixesStay: false,
            symbolPosition: 'left'
        });
        

    });
</script>